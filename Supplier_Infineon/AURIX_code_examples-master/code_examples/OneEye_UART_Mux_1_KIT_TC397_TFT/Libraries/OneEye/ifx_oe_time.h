/**
 * \file ifx_oe_time.h
 *
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef IFX_OE_TIME_H
#define IFX_OE_TIME_H
#include "ifx_oe_al.h"

/******************************************************************************/
/*                           Typedef                                          */
/******************************************************************************/

#ifdef IFX_CFG_OE_DEFINE_TICKTIME
typedef sint64 Ifx_Oe_TickTime;                /**< \brief Time in ticks */
#endif

/******************************************************************************/
/*                           Macros                                           */
/******************************************************************************/

/******************************************************************************/
/*                           Function prototypes                              */
/******************************************************************************/

IFX_OE_INLINE Ifx_Oe_TickTime Ifx_Oe_Time_add(Ifx_Oe_TickTime a, Ifx_Oe_TickTime b);
IFX_OE_INLINE Ifx_Oe_TickTime Ifx_Oe_Time_getDeadLine(Ifx_Oe_TickTime timeout);

IFX_OE_INLINE boolean         Ifx_Oe_Time_isDeadLine(Ifx_Oe_TickTime deadLine);
/** \brief Return system timer value (critical section).
 *
 * The function IfxStm_get() is called in a critical section, disabling
 * the interrupts. The system timer value is limited to Ifx_Oe_Time_infinite.
 *
 * \return Returns system timer value.
 */
Ifx_Oe_TickTime               Ifx_Oe_Time_now(void);
IFX_OE_INLINE void            Ifx_Oe_Time_wait(Ifx_Oe_TickTime timeout);

#define Ifx_Oe_Time_0s       ((Ifx_Oe_TickTime)0)                        /**< \brief time constant equal to 1s */
#define Ifx_Oe_Time_infinite ((Ifx_Oe_TickTime)0x7FFFFFFFFFFFFFFFLL)

IFX_OE_EXTERN Ifx_Oe_TickTime Ifx_Oe_Time_getTickForMilliseconds(uint32 milliseconds);
IFX_OE_EXTERN Ifx_Oe_TickTime Ifx_Oe_Time_getTickForMicroseconds(uint32 microseconds);

/******************************************************************************/
/*                           Functions                                        */
/******************************************************************************/

/** \brief Add 2 Ifx_Oe_TickTime values and return the result
 *
 * \param a parameter a
 * \param b parameter b
 *
 * \return a + b. If either a or b is Ifx_Oe_Time_infinite, the result is Ifx_Oe_Time_infinite
 */
IFX_OE_INLINE Ifx_Oe_TickTime Ifx_Oe_Time_add(Ifx_Oe_TickTime a, Ifx_Oe_TickTime b)
{
    Ifx_Oe_TickTime result;

    if ((a == Ifx_Oe_Time_infinite) || (b == Ifx_Oe_Time_infinite))
    {
        result = Ifx_Oe_Time_infinite;
    }
    else
    {
        result = a + b;         /* FIXME check for overflow */
    }

    return result;
}


/** \brief Return the time dead line.
 *
 * \param timeout Specifies the dead line from now: Deadline = Now + Timeout
 *
 * \return Return the time dead line.
 */
IFX_OE_INLINE Ifx_Oe_TickTime Ifx_Oe_Time_getDeadLine(Ifx_Oe_TickTime timeout)
{
    Ifx_Oe_TickTime deadLine;

    if (timeout == Ifx_Oe_Time_infinite)
    {
        deadLine = Ifx_Oe_Time_infinite;
    }
    else
    {
        deadLine = Ifx_Oe_Time_now() + timeout;
    }

    return deadLine;
}


/** \brief Return TRUE if the dead line is over.
 *
 * \param deadLine Specifies the dead line.
 *
 * \retval TRUE Returns TRUE if the dead line is over
 * \retval FALSE Returns FALSE if the dead line is not yet over
 */
IFX_OE_INLINE boolean Ifx_Oe_Time_isDeadLine(Ifx_Oe_TickTime deadLine)
{
    boolean result;

    if (deadLine == Ifx_Oe_Time_infinite)
    {
        result = FALSE;
    }
    else
    {
        result = Ifx_Oe_Time_now() >= deadLine;
    }

    return result;
}


/** \brief Wait for a while.
 *
 * \param timeout Specifies the waiting time
 *
 * \return None.
 */
IFX_OE_INLINE void Ifx_Oe_Time_wait(Ifx_Oe_TickTime timeout)
{
    Ifx_Oe_TickTime deadLine = Ifx_Oe_Time_getDeadLine(timeout);

    while (Ifx_Oe_Time_isDeadLine(deadLine) == FALSE)
    {
    }
}


#endif /* IFX_OE_TIME_H */
