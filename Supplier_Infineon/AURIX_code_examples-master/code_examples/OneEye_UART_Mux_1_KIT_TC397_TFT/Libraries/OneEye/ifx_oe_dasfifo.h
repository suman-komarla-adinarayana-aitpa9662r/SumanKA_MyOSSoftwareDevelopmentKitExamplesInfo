/**
 * \file ifx_oe_dasfifo.h
 *
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 */

#ifndef IFX_OE_DASFIFO_H
#define IFX_OE_DASFIFO_H

#include "ifx_oe_al.h"
#include "ifx_oe_time.h"

typedef union
{
    struct
    {
        volatile uint32 active : 10;
        volatile uint32 ready : 10;
        volatile uint32 writepos : 10;
        volatile uint32 dummy : 2;
    } data;
    volatile uint32 value;
} Ifx_Oe_DasFifo_ToOneEyeControl;

typedef struct
{
    volatile uint32 rxBeg;     // position of first byte to read
    volatile uint32 rxEnd;     // position of last byte to read
} Ifx_Oe_DasFifo_FromOneEyeControl;

typedef struct
{
    volatile Ifx_Oe_DasFifo_ToOneEyeControl control;
    char* data;
    volatile uint32 readPos;
} Ifx_Oe_DasFifo_ToOneEye;

typedef struct
{
    volatile Ifx_Oe_DasFifo_FromOneEyeControl control;
    char* data;
} Ifx_Oe_DasFifo_FromOneEye;

typedef struct
{
    Ifx_Oe_DasFifo_ToOneEye tx;
    Ifx_Oe_DasFifo_FromOneEye rx;
    uint32 size;
} Ifx_Oe_DasFifo;

typedef struct
{
    uint32 size;        // size in bytes, limited to maximum 1024 bytes
} Ifx_Oe_DasFifo_Config;

Ifx_Oe_SizeT Ifx_Oe_DasFifo_write(Ifx_Oe_DasFifo* fifo, char* src, Ifx_Oe_SizeT count, Ifx_Oe_TickTime timeout);
Ifx_Oe_SizeT Ifx_Oe_DasFifo_read(Ifx_Oe_DasFifo* fifo, char* dst, Ifx_Oe_SizeT* count, Ifx_Oe_TickTime timeout);
void         Ifx_Oe_DasFifo_clearRx(Ifx_Oe_DasFifo* fifo);
void         Ifx_Oe_DasFifo_clearTx(Ifx_Oe_DasFifo* fifo);

void         Ifx_Oe_DasFifo_initConfig(Ifx_Oe_DasFifo_Config* config);
boolean      Ifx_Oe_DasFifo_init(Ifx_Oe_DasFifo* fifo, Ifx_Oe_DasFifo_Config* config);

#endif
