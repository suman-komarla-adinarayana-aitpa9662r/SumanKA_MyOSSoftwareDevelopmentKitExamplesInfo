/**
 * \file ifx_oe_al.h
 *
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef IFX_OE_AL_H
#define IFX_OE_AL_H

#include "ifx_oe_cfg.h"

#ifdef IFX_OE_AL_USE_AURIX_ILLD
#include "ifx_oe_al_aurix_illd.h"
#else
#error "****************************************************************************************************************************"
#error "OneEye library: No Hardware Abstracton Layer defined, Please define one of the IFX_OE_AL_USE_AURIX_ILLD, ... in ifx_oe_cfg.h"
#error "****************************************************************************************************************************"
#endif

#include "ifx_oe_def.h"

#if 0

#ifndef IFX_INLINE
#define IFX_INLINE static inline __attribute__ ((always_inline))                    /*Makes the function always inlined */
#endif

typedef unsigned char      boolean;         /* for use with TRUE/FALSE      */
typedef unsigned char      uint8;
typedef unsigned short     uint16;
typedef unsigned long      uint32;
typedef unsigned long long uint64;
typedef signed char        sint8;
typedef short              sint16;
typedef long               sint32;
typedef long long          sint64;
typedef const char*        pchar;                           /**< \brief const char pointer                               */
typedef float              float32;         /* IEEE754-2008 single precision */
typedef double             float64;         /* IEEE754-2008 double precision */

typedef sint16 Ifx_Oe_SizeT;                       /**< \brief Type used for data stream size */

/**
 * @brief Disable the interrupts
 *
 * Need to be implemented (device specific)
 *
 * @return Return true if the interrupt were enabled prior to the call
 */
IFX_OE_INLINE boolean Ifx_Oe_disableInterrupts(void);

/**
 * @brief Restore the interrupts state
 *
 * Need to be implemented (device specific)
 */
IFX_OE_INLINE void Ifx_Oe_restoreInterrupts(boolean enabled);

/**
 * @brief Convert from fixpoint to float
 * @param value fixpoint value
 * @param shift
 * @return converted float value
 */
IFX_OE_INLINE float32 Ifx_Oe_fixpoint_to_float32(fract value, sint32 shift);

/** \brief Binary semaphore using compare and swap instruction
 * \param address address of resource.
 * \param value This variable is updated with status of address
 * \param condition if the value of address matches with the value of condition, then swap of value & address occurs.
 *
 */
IFX_OE_INLINE unsigned int Ifx_Oe_cmpAndSwap(unsigned int volatile* address, unsigned int value, unsigned int condition);

/**
 * @return Return the timer frequency in Hz
 */
IFX_OE_EXTERN sint32 Ifx_Oe_getTimerFrequency(void);

#endif

/* Place holder */
IFX_OE_INLINE void Ifx_Oe_debugPrint(unsigned int pointer, pchar format, ...)
{ /*Ifx_XLog::debug(...) */ }

#endif /* IFX_OE_AL_H */
