/**
 * \file ifx_oe_oscibbmessages.h
 *
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef IFX_OE_OSCIMESSAGES_H
#define IFX_OE_OSCIMESSAGES_H

#include "ifx_oe_syncprotocol.h"

#define IFX_OE_SYNCPROTOCOL_VARIANT_QT    (1)
#define IFX_OE_SYNCPROTOCOL_VARIANT_AURIX (2)
#ifndef IFX_OE_SYNCPROTOCOL_VARIANT
#define IFX_OE_SYNCPROTOCOL_VARIANT IFX_OE_SYNCPROTOCOL_VARIANT_AURIX
#endif

#if IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT
#include <QtGlobal>
#include "pguiitem_oscilloscope_types.h"
#elif IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_AURIX

#endif

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CONTROL_CMD (0x1100)    /**< \see Ifx_Oe_Osci_MessageControlCmd */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    float32 triggerLevel;
    uint32  depth;
    struct
    {
        /** Oscilloscope enable. 0=stopped, 1=running */
        uint16 enabled : 1;
        /** Trigger single. 0=continuous, 1=single */
        uint16 triggerSingle : 1;
        /** Trigger mode. 0=normal, 1=automatic, 1=inverted */
        uint16 triggerMode : 2;
        /** Trigger edge. 0=falling, 1=rising */
        uint16 triggerEdge : 2;
        uint16 reserved : 10;
    } flags;
    /** Sampling interval */
    uint16 samplingInterval;
    /** index of the channel used for the trigger */
    uint16 triggerChannel;
} Ifx_Oe_Osci_MessageControlCmd;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CONTROL_CMD_SIZE (14)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_STATE (0x1101)    /**< \see Ifx_Oe_Osci_MessageState */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    float32 triggerLevel;
    /** Sampling period in s */
    float32 samplingPeriod;
    uint32  maxDepth;
    uint32  depth;
    struct
    {
        /** Oscilloscope enable. 0=stopped, 1=running */
        uint16 enabled : 1;
        /** Trigger single. 0=continuous, 1=single */
        uint16 triggerSingle : 1;
        /** Trigger mode. 0=normal, 1=automatic, 1=inverted */
        uint16 triggerMode : 2;
        /** Trigger edge. 0=falling, 1=rising */
        uint16 triggerEdge : 2;
        /** Osci state. 1: armed, 2: triggered, 3:stopped, 4: data transfer, else undefined */
        uint16 state : 3;
        uint16 reserved : 7;
    } flags;
    /** Sampling interval */
    uint16 samplingInterval;
    /** index of the channel used for the trigger */
    uint16 triggerChannel;
    /** Number of available channeld */
    uint16 numberOfChannels;
    uint16 numberOfSignals;
} Ifx_Oe_Osci_MessageState;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_STATE_SIZE (26)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_GET_STATE_REQ (0x1102)    /**< \see Ifx_Oe_Osci_MessageGetStateCmd */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    /** Unused, must be 0 */
    uint32 reserved;
} Ifx_Oe_Osci_MessageGetStateCmd;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_GET_STATE_REQ_SIZE (4)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_SIGNAL_INFO (0x1103)    /**< \see Ifx_Oe_Osci_MessageSignalInfo */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    uint16 signalId;
    uint16 reserved[7];
    uint8  name[256];
} Ifx_Oe_Osci_MessageSignalInfo;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_SIGNAL_INFO_SIZE (272)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_ASSIGN_CHANNEL_CMD (0x1105)    /**< \see Ifx_Oe_Osci_MessageAssignChannel */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    uint16 channelId;
    uint16 signalId;
} Ifx_Oe_Osci_MessageAssignChannel;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_ASSIGN_CHANNEL_CMD_SIZE (4)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_ASSIGNED_CHANNEL (0x1106)    /**< \see Ifx_Oe_Osci_MessageAssignedChannel */
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    uint16 channelId;
    uint16 signalId;
    uint32 dataDepth;
} Ifx_Oe_Osci_MessageAssignedChannel;
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_ASSIGNED_CHANNEL_CMD_SIZE (8)

#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA (0x1109)    /**< \see Ifx_Oe_Osci_MessageChannelData */
//#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA_MAX_PAYLOAD (128)
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA_MAX_PAYLOAD (48) /* Pack in one frame*/
#if defined(__HIGHTEC__) || (IFX_OE_SYNCPROTOCOL_VARIANT == IFX_OE_SYNCPROTOCOL_VARIANT_QT)
typedef struct __attribute__ ((__packed__))
#elif defined(__TASKING__)
typedef struct
#else
typedef struct
#endif
{
    uint16 channelId;
    uint16 signalId;
    struct
    {
        uint16 dataLength : 8;
        /* Set if transmission of a new set of data starts */
        uint16 newData : 1;
        /* Set if all channel data are transfered */
        uint16 allDone : 1;
        uint16 reserved : 6;
    } flags;
    uint16  reserved;
    uint32  dataOffset;
    float32 data[IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA_MAX_PAYLOAD];
} Ifx_Oe_Osci_MessageChannelData;
//#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA_SIZE (524)
#define IFX_OE_SYNCPROTOCOL_MESSAGE_ID_OSCILLOSCOPE_CHANNEL_DATA_SIZE (204)

#endif
