/********************************************************************************************************************
 * \file MCMCAN_Filtering.h
 * \copyright Copyright (C) Infineon Technologies AG 2020
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef MCMCAN_FILTERING_H_
#define MCMCAN_FILTERING_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include <stdio.h>
#include <string.h>
#include "Bsp.h"
#include "Ifx_Types.h"
#include "IfxCan_Can.h"
#include "IfxCan.h"
#include "IfxCpu_Irq.h"
#include "IfxPort.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define PIN0                        0                           /* LED used in RX ISR is connected to this pin       */
#define DO_NOT_CARE_BUFFER_INDEX    (IfxCan_RxBufferId)0
#define DO_NOT_CARE_ID2_VALUE       (uint32)0
#define INVALID_TX_DATA_VALUE       (uint32)0x55555555          /* Used to invalidate TX message data content        */
#define INVALID_RX_DATA_VALUE       (uint32)0xAAAAAAAA          /* Used to invalidate RX message data content        */
#define INVALID_ID_VALUE            (uint32)0xFFFFFFFF          /* Used to invalidate RX messages ID value           */
#define INVALID_DLC_VALUE           IfxCan_DataLengthCode_0     /* Used to invalidate RX messages DLC value          */
#define DEFAULT_FRAME_MODE          IfxCan_FrameMode_standard   /* Used to invalidate RX messages frame mode value   */
#define CUR_FILTER_USE_CASE_OFFSET  24                          /* Define the shift offset value                     */
#define ISR_PRIORITY_CAN_RX_BUFFER  1                           /* Define the dedicated RX buffer interrupt priority */
#define ISR_PRIORITY_CAN_RX_FIFO_0  2                           /* Define the RX FIFO 0 interrupt priority           */
#define ISR_PRIORITY_CAN_RX_FIFO_1  3                           /* Define the RX FIFO 1 interrupt priority           */
#define NUMBER_OF_FIFO_ELEMENTS     15                          /* Define the number of RX FIFO 0/1 elements         */
#define MAXIMUM_CAN_FD_DATA_PAYLOAD 64                          /* Define maximum CAN FD payload in bytes            */
#define MAXIMUM_DATA_PAYLOAD_WORDS  MAXIMUM_CAN_FD_DATA_PAYLOAD / \
                                    sizeof(uint32)              /* Define maximum CAN FD payload in words            */
#define NUMBER_OF_STND_ID_FILTERS   8                           /* Define the number of standard ID filter elements  */
#define NUMBER_OF_EXTD_ID_FILTERS   4                           /* Define the number of extended ID filter elements  */
#define DATA_PAYLOAD(x, y)          (uint32)((x << CUR_FILTER_USE_CASE_OFFSET) | y)
#define NUMBER_OF_TOTAL_FILTERS     NUMBER_OF_STND_ID_FILTERS +  \
                                    NUMBER_OF_EXTD_ID_FILTERS   /* Define the number of total filter elements        */
#define NUMBER_OF_CAN_MESSAGES      25                          /* Define the number of CAN messages to be sent      */
#define WAIT_TIME                   1                           /* Number of milliseconds to wait after transmission */

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    IfxCan_Can_Config canConfig;                                /* CAN module configuration structure                */
    IfxCan_Can canModule;                                       /* CAN module handle                                 */
    IfxCan_Can_Node canSrcNode;                                 /* CAN source node handle data structure             */
    IfxCan_Can_Node canDstNode;                                 /* CAN destination node handle data structure        */
    IfxCan_Can_NodeConfig canNodeConfig;                        /* CAN node configuration structure                  */
    IfxCan_Filter canFilter;                                    /* CAN filter configuration structure                */
    IfxCan_Message txMsg;                                       /* Transmitted CAN message structure                 */
    IfxCan_Message rxMsg[NUMBER_OF_CAN_MESSAGES];               /* Received CAN message structure                    */
    uint32 txData[MAXIMUM_DATA_PAYLOAD_WORDS];                  /* Transmitted CAN data array                        */
    uint32 rxData[NUMBER_OF_CAN_MESSAGES][MAXIMUM_DATA_PAYLOAD_WORDS];    /* Received CAN data matrix                */
} mcmcanType;

typedef enum
{
    CanFilterAcceptance_Reject = 0,
    CanFilterAcceptance_Accept
} canFilterAcceptanceType;

typedef enum
{
    CanStoreInDestinationType_notApplicable = 0,
    CanStoreInDestinationType_RxBuffer,
    CanStoreInDestinationType_RxFifo0,
    CanStoreInDestinationType_RxFifo1
} canStoreInDestinationType;

typedef struct
{
    uint32  messageId : 29;                             /* Define the standard or extended message ID value          */
    IfxCan_MessageIdLength  messageIdLength;            /* Define the length of the message ID                       */
    IfxCan_FrameMode frameMode : 2;                     /* Define frame mode to be used                              */
    IfxCan_DataLengthCode messageLen : 4;               /* Define length of the transmitted data (number of bytes)   */
    canFilterAcceptanceType acceptanceResult: 1;        /* Define the expected result of acceptance filtering        */
    canStoreInDestinationType destination: 2;           /* Define the where the received message should be stored    */
} useCaseConfigType;

typedef enum
{
    CanCommunicationStatus_Success = 0,
    CanCommunicationStatus_Error_notExpectedMessageId,
    CanCommunicationStatus_Error_notExpectedLengthCode,
    CanCommunicationStatus_Error_notExpectedFrameMode,
    CanCommunicationStatus_Error_notExpectedStorageDestination,
    CanCommunicationStatus_Error_notExpectedRxBufferId,
    CanCommunicationStatus_Error_notExpectedData
} canCommunicationStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN canCommunicationStatusType g_status;
IFX_EXTERN IfxPort_Pin_Config g_led1;

/*********************************************************************************************************************/
/*-----------------------------------------------Function Prototypes-------------------------------------------------*/
/*********************************************************************************************************************/
void canIsrRxHandler(void);
void initMCMCAN(void);
void initFilter(void);
void transmitCanMessage(void);
void verifyCanMessage(void);
void initLed(void);

#endif MCMCAN_FILTERING_H_
