/**
 * \file ifx_oe_fifodpipe.h
 * \brief FIFO DPipe
 *
 *
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */
#ifndef IFX_OE_FIFODPIPE_H
#define IFX_OE_FIFODPIPE_H

#include "ifx_oe_dpipewrapper.h"
#include "ifx_oe_fifo.h"

#if !defined(IFX_CFG_OE_FIFODPIPE_TIMEOUT)
#define IFX_CFG_OE_FIFODPIPE_TIMEOUT (Ifx_Oe_Time_infinite) /**<\brief Default DPipe Tx timeout */
#endif

/** \addtogroup library_sysse_hwindependant_comm_fifoDPipe_cDriver
 * \{ */

typedef struct
{
    Ifx_Oe_Fifo* tx;                             /**< \brief Transmit FIFO buffer */
    Ifx_Oe_Fifo* rx;                             /**< \brief Receive FIFO buffer */
    Ifx_Oe_TickTime writeTimeout;                    /**< \brief Write timeout */
    IfxStdIf_DPipe stdif;
}Ifx_Oe_FifoDPipe;

IFX_OE_EXTERN boolean                   Ifx_Oe_FifoDPipe_write(Ifx_Oe_FifoDPipe* dPipe, void* data, Ifx_Oe_SizeT* count);
IFX_OE_EXTERN void                      Ifx_Oe_FifoDPipe_writeFormatted(Ifx_Oe_FifoDPipe* dPipe, pchar format, ...);
IFX_OE_EXTERN void                      Ifx_Oe_FifoDPipe_writeText(Ifx_Oe_FifoDPipe* dPipe, pchar text);
IFX_OE_EXTERN boolean                   Ifx_Oe_FifoDPipe_read(Ifx_Oe_FifoDPipe* dPipe, void* data, Ifx_Oe_SizeT* count, Ifx_Oe_TickTime timeout);
IFX_OE_EXTERN sint32                    Ifx_Oe_FifoDPipe_getReadCount(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_EXTERN IfxStdIf_DPipe_ReadEvent  Ifx_Oe_FifoDPipe_getReadEvent(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_INLINE uint32                    Ifx_Oe_FifoDPipe_getSendCount(Ifx_Oe_FifoDPipe* dPipe)
{ return 0; /* FIXME TODO */ }
IFX_OE_INLINE Ifx_Oe_TickTime           Ifx_Oe_FifoDPipe_getTxTimeStamp(Ifx_Oe_FifoDPipe* dPipe)
{ return 0; /* FIXME TODO */ }
IFX_OE_EXTERN sint32                    Ifx_Oe_FifoDPipe_getWriteCount(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_EXTERN IfxStdIf_DPipe_WriteEvent Ifx_Oe_FifoDPipe_getWriteEvent(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_EXTERN boolean                   Ifx_Oe_FifoDPipe_canReadCount(Ifx_Oe_FifoDPipe* dPipe, Ifx_Oe_SizeT count, Ifx_Oe_TickTime timeout);
IFX_OE_EXTERN boolean                   Ifx_Oe_FifoDPipe_canWriteCount(Ifx_Oe_FifoDPipe* dPipe, Ifx_Oe_SizeT count, Ifx_Oe_TickTime timeout);
IFX_OE_EXTERN boolean                   Ifx_Oe_FifoDPipe_flushTx(Ifx_Oe_FifoDPipe* dPipe, Ifx_Oe_TickTime timeout);
IFX_OE_EXTERN void                      Ifx_Oe_FifoDPipe_clearRx(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_EXTERN void                      Ifx_Oe_FifoDPipe_clearTx(Ifx_Oe_FifoDPipe* dPipe);
IFX_OE_INLINE void                      Ifx_Oe_FifoDPipe_onReceive(Ifx_Oe_FifoDPipe* dPipe)
{ /* NOTHING TO DO  */ }
IFX_OE_INLINE void                      Ifx_Oe_FifoDPipe_onTransmit(Ifx_Oe_FifoDPipe* dPipe)
{ /* NOTHING TO DO  */ }
IFX_OE_INLINE void                      Ifx_Oe_FifoDPipe_onError(Ifx_Oe_FifoDPipe* dPipe)
{ /* NOTHING TO DO  */ }
IFX_OE_INLINE void                      Ifx_Oe_FifoDPipe_resetSendCount(Ifx_Oe_FifoDPipe* dPipe)
{ /* FIXME TODO */ }

IFX_OE_INLINE IfxStdIf_DPipe* Ifx_Oe_FifoDPipe_getStdIf(Ifx_Oe_FifoDPipe* dPipe)
{ return &dPipe->stdif; }

Ifx_Oe_FifoDPipe*          Ifx_Oe_FifoDPipe_create(Ifx_Oe_SizeT rxBufferSize, Ifx_Oe_SizeT txBufferSize);
void                       Ifx_Oe_FifoDPipe_destroy(Ifx_Oe_FifoDPipe* dPipe);

IFX_OE_EXTERN void         Ifx_Oe_FifoDPipe_init(Ifx_Oe_FifoDPipe* dPipe, Ifx_Oe_SizeT rxBufferSize, Ifx_Oe_SizeT txBufferSize);
IFX_OE_EXTERN void         Ifx_Oe_FifoDPipe_deInit(Ifx_Oe_FifoDPipe* dPipe);
/**
 * @return Returns a pointer on the TX FIFO
 */
IFX_OE_INLINE Ifx_Oe_Fifo* Ifx_Oe_FifoDPipe_getTxFifo(Ifx_Oe_FifoDPipe* dPipe)
{ return dPipe->tx; }

/**
 * @return Returns a pointer on the RX FIFO
 */
IFX_OE_INLINE Ifx_Oe_Fifo* Ifx_Oe_FifoDPipe_getRxFifo(Ifx_Oe_FifoDPipe* dPipe)
{ return dPipe->rx; }

IFX_OE_INLINE void Ifx_Oe_FifoDPipe_disableTx(Ifx_Oe_FifoDPipe* dPipe)
{ dPipe->stdif.txDisabled = TRUE; }

IFX_OE_INLINE void Ifx_Oe_FifoDPipe_enableTx(Ifx_Oe_FifoDPipe* dPipe)
{ dPipe->stdif.txDisabled = FALSE; }

/**
 * @return Return the write timeout
 */
IFX_OE_INLINE Ifx_Oe_TickTime Ifx_Oe_FifoDPipe_getWriteTimeout(Ifx_Oe_FifoDPipe* dPipe)
{ return dPipe->writeTimeout; }

/**
 * @return Set the write timeout
 */
IFX_OE_INLINE void Ifx_Oe_FifoDPipe_setWriteTimeout(Ifx_Oe_FifoDPipe* dPipe, Ifx_Oe_TickTime timeout)
{ dPipe->writeTimeout = timeout; }

IFX_OE_INLINE boolean Ifx_Oe_FifoDPipe_isTxDisabled(Ifx_Oe_FifoDPipe* dPipe)
{ return dPipe->stdif.txDisabled; }

IFX_OE_EXTERN boolean Ifx_Oe_FifoDPipe_initStdIf(Ifx_Oe_FifoDPipe* dPipe);

/** \} */
#endif /* IFX_OE_FIFODPIPE_H */
